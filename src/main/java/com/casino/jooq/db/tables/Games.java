/*
 * This file is generated by jOOQ.
 */
package com.casino.jooq.db.tables;


import com.casino.jooq.db.Casino;
import com.casino.jooq.db.Indexes;
import com.casino.jooq.db.Keys;
import com.casino.jooq.db.tables.records.GamesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Games extends TableImpl<GamesRecord> {

    private static final long serialVersionUID = 1124710033;

    /**
     * The reference instance of <code>casino.games</code>
     */
    public static final Games GAMES = new Games();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamesRecord> getRecordType() {
        return GamesRecord.class;
    }

    /**
     * The column <code>casino.games.id</code>.
     */
    public final TableField<GamesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>casino.games.start</code>.
     */
    public final TableField<GamesRecord, Timestamp> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>casino.games.end</code>.
     */
    public final TableField<GamesRecord, Timestamp> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>casino.games.status</code>.
     */
    public final TableField<GamesRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("OPEN", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>casino.games.number</code>.
     */
    public final TableField<GamesRecord, Integer> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>casino.games.casinoId</code>.
     */
    public final TableField<GamesRecord, Integer> CASINOID = createField(DSL.name("casinoId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>casino.games.dealerId</code>.
     */
    public final TableField<GamesRecord, Integer> DEALERID = createField(DSL.name("dealerId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>casino.games</code> table reference
     */
    public Games() {
        this(DSL.name("games"), null);
    }

    /**
     * Create an aliased <code>casino.games</code> table reference
     */
    public Games(String alias) {
        this(DSL.name(alias), GAMES);
    }

    /**
     * Create an aliased <code>casino.games</code> table reference
     */
    public Games(Name alias) {
        this(alias, GAMES);
    }

    private Games(Name alias, Table<GamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Games(Name alias, Table<GamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Games(Table<O> child, ForeignKey<O, GamesRecord> key) {
        super(child, key, GAMES);
    }

    @Override
    public Schema getSchema() {
        return Casino.CASINO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GAMES_CASINO_IDX, Indexes.GAMES_DEALER_GAME_IDX, Indexes.GAMES_ID_UNIQUE, Indexes.GAMES_PRIMARY);
    }

    @Override
    public Identity<GamesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GAMES;
    }

    @Override
    public UniqueKey<GamesRecord> getPrimaryKey() {
        return Keys.KEY_GAMES_PRIMARY;
    }

    @Override
    public List<UniqueKey<GamesRecord>> getKeys() {
        return Arrays.<UniqueKey<GamesRecord>>asList(Keys.KEY_GAMES_PRIMARY, Keys.KEY_GAMES_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GamesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GamesRecord, ?>>asList(Keys.CASINO_GAME, Keys.DEALER_GAME);
    }

    public Casinos casinos() {
        return new Casinos(this, Keys.CASINO_GAME);
    }

    public Dealers dealers() {
        return new Dealers(this, Keys.DEALER_GAME);
    }

    @Override
    public Games as(String alias) {
        return new Games(DSL.name(alias), this);
    }

    @Override
    public Games as(Name alias) {
        return new Games(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(String name) {
        return new Games(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(Name name) {
        return new Games(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Timestamp, Timestamp, String, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

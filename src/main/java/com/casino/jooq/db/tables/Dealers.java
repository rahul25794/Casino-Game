/*
 * This file is generated by jOOQ.
 */
package com.casino.jooq.db.tables;


import com.casino.jooq.db.Casino;
import com.casino.jooq.db.Indexes;
import com.casino.jooq.db.Keys;
import com.casino.jooq.db.tables.records.DealersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dealers extends TableImpl<DealersRecord> {

    private static final long serialVersionUID = 312619153;

    /**
     * The reference instance of <code>casino.dealers</code>
     */
    public static final Dealers DEALERS = new Dealers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DealersRecord> getRecordType() {
        return DealersRecord.class;
    }

    /**
     * The column <code>casino.dealers.id</code>.
     */
    public final TableField<DealersRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>casino.dealers.name</code>.
     */
    public final TableField<DealersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>casino.dealers.casinoId</code>.
     */
    public final TableField<DealersRecord, Integer> CASINOID = createField(DSL.name("casinoId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>casino.dealers</code> table reference
     */
    public Dealers() {
        this(DSL.name("dealers"), null);
    }

    /**
     * Create an aliased <code>casino.dealers</code> table reference
     */
    public Dealers(String alias) {
        this(DSL.name(alias), DEALERS);
    }

    /**
     * Create an aliased <code>casino.dealers</code> table reference
     */
    public Dealers(Name alias) {
        this(alias, DEALERS);
    }

    private Dealers(Name alias, Table<DealersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dealers(Name alias, Table<DealersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dealers(Table<O> child, ForeignKey<O, DealersRecord> key) {
        super(child, key, DEALERS);
    }

    @Override
    public Schema getSchema() {
        return Casino.CASINO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEALERS_CASINO_DEALER_IDX, Indexes.DEALERS_ID_UNIQUE, Indexes.DEALERS_PRIMARY);
    }

    @Override
    public Identity<DealersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEALERS;
    }

    @Override
    public UniqueKey<DealersRecord> getPrimaryKey() {
        return Keys.KEY_DEALERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DealersRecord>> getKeys() {
        return Arrays.<UniqueKey<DealersRecord>>asList(Keys.KEY_DEALERS_PRIMARY, Keys.KEY_DEALERS_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<DealersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DealersRecord, ?>>asList(Keys.CASINO_DEALER);
    }

    public Casinos casinos() {
        return new Casinos(this, Keys.CASINO_DEALER);
    }

    @Override
    public Dealers as(String alias) {
        return new Dealers(DSL.name(alias), this);
    }

    @Override
    public Dealers as(Name alias) {
        return new Dealers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dealers rename(String name) {
        return new Dealers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dealers rename(Name name) {
        return new Dealers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
